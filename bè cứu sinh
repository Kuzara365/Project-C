#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

struct product
{
    int id;
    char product_name[30];
    int remain;
    int price;
};

struct cart
{
    int id;
    char product_id[30];
    char product_name[30];
    int price;
    int sum;
    int final_sum;
    int user_id;
};

struct user
{
    int id;
    char name[30];
    char address[30];
    int phone_number;
};

struct order
{
    int id;
    char product_id[30];
    char product_name[30];
    int price;
    int final_sum;
    char payment[100];
    char status[30];
    int user_id;
    int cart_id;
    int quantity;
};

int lastAssignedID = 0;

// import data from product.csv
void readProduct(struct product **products, int *productCount)
{
    char line[1000];
    char *data;
    FILE *productData = fopen("Datalo/product.csv", "r");
    if (productData == NULL)
    {
        printf("Error opening file\n");
        return;
    }
    else
    {
        while (fgets(line, 100, productData) != NULL)
        {
            (*productCount)++;
            *products = (struct product *)realloc(*products, *productCount * sizeof(struct product));

            data = strtok(line, ",");
            (*products)[*productCount - 1].id = atoi(data);

            data = strtok(NULL, ",");
            strcpy((*products)[*productCount - 1].product_name, data);

            data = strtok(NULL, ",");
            (*products)[*productCount - 1].remain = atoi(data);

            data = strtok(NULL, ",");
            (*products)[*productCount - 1].price = atoi(data);
        }
        fclose(productData);
    }
}

// Display product
void displayProduct(struct product *products, int productCount)
{
    printf("List of product \n");
    for (int i = 1; i < productCount; i++)
    {
        printf("ID: %d\n", products[i].id);
        printf("%s\n", products[i].product_name);
        printf("Remain %d\n", products[i].remain);
        printf("Price %d\n", products[i].price);
        printf("--------------------------------------\n");
    }
}

// Export user to file
void ExportUser(struct user *users, int userCount)
{
    FILE *userData = fopen("Datalo/user.csv", "a");
    if (userData == NULL)
    {
        printf("Error opening file\n");
        return;
    }
    else
    {
        for (int i = 0; i < userCount; i++)
        {
            fprintf(userData, "%d, ", users[i].id);
            fprintf(userData, "%s, ", users[i].name);
            fprintf(userData, "%s, ", users[i].address);
            fprintf(userData, "%d, ", users[i].phone_number);
        }
        fclose(userData);
    }
}

void MainMenu()
{
    printf("|=============ONLINE SALES SYSTEM==============|\n");
    printf("|==  0.Exit.                                 ==|\n");
    printf("|==  1.Check goods.                          ==|\n");
    printf("|==  2.Cart: check your bills.               ==|\n");
    printf("|==  3.Check purchased orders.               ==|\n");
    printf("|==============================================|\n");
}

void MenuSales()
{
    printf("****************SALES PAGE******************\n");
    printf("0.Exit.\n");
    printf("1.Select goods.\n");
    printf("********************************************\n");
}

void CheckCart()
{
    printf("*****************CART*****************\n");
    printf("0.Move to menu.\n");
    printf("1.Select bills.\n");
    printf("**************************************\n");
}

void enterUserInfo(struct user *user)
{
    printf("Enter your Id: ");
    scanf("%d", &user->id);

    printf("Your name: ");
    scanf("%s", user->name);

    printf("Your address: ");
    scanf("%s", user->address);

    printf("Phone number: ");
    scanf("%s", user->phone_number);
}

// Function to add new cart
void addCart(struct cart **carts, int *cartCount, char *product_id, char *product_name, float price, float sum, float final_sum, int user_id)
{
    *carts = (struct cart *)realloc(*carts, (*cartCount + 1) * sizeof(struct cart));
    (*carts)[*cartCount].id = ++lastAssignedID; // Increment and assign new ID
    strcpy((*carts)[*cartCount].product_id, product_id);
    strcpy((*carts)[*cartCount].product_name, product_name);
    (*carts)[*cartCount].price = price;
    (*carts)[*cartCount].sum = sum;
    (*carts)[*cartCount].final_sum = final_sum;
    (*carts)[*cartCount].user_id = user_id;
    (*cartCount)++;
    printf("Created new cart successfully.\n");
}

// Function to add product to cart
void addtoCart(struct cart *carts, int cartCount, int id, float new_final_sum)
{
    for (int i = 0; i < cartCount; i++)
    {
        if (carts[i].id == id)
        {
            carts[i].final_sum = new_final_sum;
            printf("Added product to cart successfully.\n");
            return;
        }
    }
    printf("Cart with corresponding ID not found.\n");
}

// Function to remove product from cart
void removeFromCart(struct cart *carts, int cartCount, int id, float new_final_sum)
{
    int found = 0;
    int i, j;
    for (i = 0; i < cartCount; i++)
    {
        if (carts[i].id == id)
        {
            for (j = i; j < cartCount - 1; j++)
            {
                carts[j] = carts[j + 1];
            }
            cartCount--;
            printf("Product removed from cart!\n");
            found = 1;
            break;
        }
    }

    if (!found)
    {
        printf("Product not found in cart!\n");
    }
    return;
}

// Function to add new order
void addOrder(struct order **orders, int *orderCount, char *product_id, char *product_name, float price, float final_sum, char *payment, char *status, int user_id, int cart_id)
{
    *orders = (struct order *)realloc(*orders, (*orderCount + 1) * sizeof(struct order));
    (*orders)[*orderCount].id = ++lastAssignedID; // Increment and assign new ID
    strcpy((*orders)[*orderCount].product_id, product_id);
    strcpy((*orders)[*orderCount].product_name, product_name);
    (*orders)[*orderCount].price = price;
    (*orders)[*orderCount].final_sum = final_sum;
    strcpy((*orders)[*orderCount].payment, payment);
    strcpy((*orders)[*orderCount].status, status);
    (*orders)[*orderCount].user_id = user_id;
    (*orders)[*orderCount].cart_id = cart_id;
    (*orderCount)++;
    printf("Created new order successfully.\n");
}

// Function to update order
void updateOrder(struct order *orders, int orderCount, int id, char *new_status)
{
    for (int i = 0; i < orderCount; i++)
    {
        if (orders[i].id == id)
        {
            strcpy(orders[i].status, new_status);
            printf("Updated order successfully.\n");
            return;
        }
    }
    printf("Order with corresponding ID not found.\n");
}

// Function to delete order
void deleteOrder(struct order **orders, int *orderCount, int id)
{
    int found = 0;
    for (int i = 0; i < *orderCount; i++)
    {
        if ((*orders)[i].id == id)
        {
            for (int j = i; j < *orderCount - 1; j++)
            {
                (*orders)[j] = (*orders)[j + 1];
            }
            (*orderCount)--;
            found = 1;
            printf("Deleted order successfully.\n");
            break;
        }
    }
    if (!found)
    {
        printf("Order with corresponding ID not found.\n");
    }
}

// Function to check order
void checkOrder(struct order *orders, int orderCount, int user_id)
{
    printf("\n====== ORDERS ======\n");
    for (int i = 0; i < orderCount; i++)
    {
        if (orders[i].user_id == user_id)
        {
            printf("Order ID: %d\n", orders[i].id);
            printf("Product ID: %s\n", orders[i].product_id);
            printf("Product Name: %s\n", orders[i].product_name);
            printf("Price: %.2f\n", orders[i].price);
            printf("Final Sum: %.2f\n", orders[i].final_sum);
            printf("Payment: %s\n", orders[i].payment);
            printf("Status: %s\n", orders[i].status);
            printf("User ID: %d\n", orders[i].user_id);
            printf("Cart ID: %d\n", orders[i].cart_id);
            printf("------------------\n");
        }
    }
    printf("====== END ORDERS ======\n");
}
// Function to check cart
void checkCart(struct cart *carts, int cartCount, int user_id)
{
    printf("\n====== CART ======\n");
    for (int i = 0; i < cartCount; i++)
    {
        if (carts[i].user_id == user_id)
        {
            printf("Cart ID: %d\n", carts[i].id);
            printf("Product ID: %s\n", carts[i].product_id);
            printf("Product Name: %s\n", carts[i].product_name);
            printf("Price: %.2f\n", carts[i].price);
            printf("Sum: %.2f\n", carts[i].sum);
            printf("Final Sum: %.2f\n", carts[i].final_sum);
            printf("User ID: %d\n", carts[i].user_id);
            printf("------------------\n");
        }
    }
    printf("====== END CART ======\n");
}

// Read user from file
void readUser(struct user **users, int *userCount)
{
    char line[100];
    char *data;
    FILE *userData = fopen("Datalo/user.csv", "r");
    if (userData == NULL)
    {
        printf("Error opening file\n");
        return;
    }
    else
    {
        while (fgets(line, 100, userData) != NULL)
        {
            (*userCount)++;
            *users = (struct user *)realloc(*users, *userCount * sizeof(struct user));

            data = strtok(line, ",");
            (*users)[*userCount - 1].id = atoi(data);

            data = strtok(NULL, ",");
            strcpy((*users)[*userCount - 1].name, data);

            data = strtok(NULL, ",");
            strcpy((*users)[*userCount - 1].address, data);

            data = strtok(NULL, ",");
            (*users)[*userCount - 1].phone_number = atoi(data);
        }
        fclose(userData);
    }
}

// Display user compared to userID in Order
void displayUser(struct user *users, struct order *order, int userCount)
{
    for (int i = 1; i < userCount; i++)
    {
        for (int j = 1; j < userCount; j++)
        {
            if (users[i].id == order[j].user_id)
            {
                printf("Name: %s\n", users[i].name);
                printf("Address: %s\n", users[i].address);
                printf("Phone number: %d\n", users[i].phone_number);
                printf("--------------------------------------\n");
            }
        }
    }
}

void ExportOrder(struct order *orders, int orderCount)
{
    FILE *orderData = fopen("Datalo/orders.csv", "a");
    if (orderData == NULL)
    {
        printf("Error opening file\n");
        return;
    }
    else
    {
        for (int i = 0; i < orderCount; i++)
        {
            fprintf(orderData, "%d, ", orders[i].id);
            fprintf(orderData, "%s, ", orders[i].product_name);
            fprintf(orderData, "%d, ", orders[i].quantity);
            fprintf(orderData, "%d, ", orders[i].price);
            fprintf(orderData, "%d, ", orders[i].final_sum);
            fprintf(orderData, "%s, ", orders[i].payment);
            fprintf(orderData, "%s, ", orders[i].status);
            fprintf(orderData, "%d, ", orders[i].user_id);
        }
        fclose(orderData);
    }
}

// Import order from file
void readOrder(struct order **orders, int *orderCount)
{
    char line[100];
    char *data;
    FILE *orderData = fopen("Datalo/orders.csv", "r");
    if (orderData == NULL)
    {
        printf("Error opening file\n");
        return;
    }
    else
    {
        while (fgets(line, 1000, orderData) != NULL)
        {
            (*orderCount)++;
            *orders = (struct order *)realloc(*orders, *orderCount * sizeof(struct order));

            data = strtok(line, ",");
            (*orders)[*orderCount - 1].id = atoi(data);

            data = strtok(NULL, ",");
            strcpy((*orders)[*orderCount - 1].product_name, data);

            data = strtok(NULL, ",");
            (*orders)[*orderCount - 1].quantity = atoi(data);

            data = strtok(NULL, ",");
            (*orders)[*orderCount - 1].price = atoi(data);

            data = strtok(NULL, ",");
            (*orders)[*orderCount - 1].final_sum = atoi(data);

            data = strtok(NULL, ",");
            strcpy((*orders)[*orderCount - 1].payment, data);

            data = strtok(NULL, ",");
            strcpy((*orders)[*orderCount - 1].status, data);

            data = strtok(NULL, ",");
            (*orders)[*orderCount - 1].user_id = atoi(data);
        }
        fclose(orderData);
    }
}

void displayOrder(struct order *orders, int orderCount)
{
    printf("List of order \n");
    for (int i = 1; i < orderCount; i++)
    {
        printf("ID Order: %d \n", orders[i].id);
        printf("Product: %s   ", orders[i].product_name);
        printf("Quantity %d   ", orders[i].quantity);
        printf("Price %d   ", orders[i].price);
        printf("Sum %d\n", orders[i].final_sum);
        printf("Payment type: %s\n", orders[i].payment);
        printf("Status: %s\n", orders[i].status);
        printf("User ID: %d\n", orders[i].user_id);
    }
}

//-----------------------------------------------------------------------
int main()
{
    struct product *products = NULL;
    struct order *orders = NULL;
    struct user *users = NULL;
    struct cart *carts = NULL;
    int userCount = 0, orderCount = 0, productCount = 0, cartCount = 0;
    MainMenu();
    int option = 0;
    do
    {
        readProduct(&products, &productCount);
        readOrder(&orders, &orderCount);
        readUser(&users, &userCount);
        printf("Choose your option: \n");
        scanf("%d", &option);
        switch (option)
        {
        case 0:
        {
            printf("You have exited the application!\n");
            break;
        }
        case 1:
        {
            printf("List goods: \n");
            // func: in san pham
            displayProduct(products, productCount);
            MenuSales();
            // lua chon mat hang mong muon
            int n;
            printf("Choose your product: \n");
            scanf("%d", &n);
            switch (n)
            {
            case 0:
            {
                // chuyen ve giao dien chinh
                printf("Move to Menu\n");
                break;
            }
            case 1:
            {
                // func: lua chon mat hang
                addCart(&carts, &cartCount, "product_id", "product_name", 100.0, 200.0, 300.0, 1);
                addtoCart(carts, cartCount, 1, 400.0);
                removeFromCart(carts, cartCount, 1, 500.0);
                break;
            }
            default:
            {
                printf("Invalid option!\n");
                break;
            }
            }
            break;
        }
        case 2:
        { // Cart : check bills
            CheckCart();
            int opt;
            printf("Choose your option: \n");
            scanf("%d", &opt);
            switch (opt)
            {
            case 0:
            { // thoat ve menu
                printf("Move to Menu\n");
                MenuSales();
                break;
            }
            case 1:
            { // lua chon gio hang
                addOrder(&orders, &orderCount, "product_id", "product_name", 600.0, 700.0, "payment", "status", 1, 1);
                updateOrder(orders, orderCount, 1, "new_status");
                deleteOrder(&orders, &orderCount, 1);
                break;
            }
            default:
            {
                printf("Invalid option!\n");
                break;
            }
            }
            break;
        }
        case 3:
        {
            int cdm;
            printf("Choose your option: \n");
            scanf("%d", &cdm);
            switch (cdm)
            {
            case 1:
                // check don mua
                checkCart(carts, cartCount, 1);
                break;
            case 2:
                // func: check don mua
                checkOrder(orders, orderCount, 1);
                break;
            case 3:
                printf("Confirm order ");
                enterUserInfo(users);
                ExportOrder(orders, orderCount);
                break;
            case 4:
                printf("Your Order :");
                displayOrder(orders, orderCount);
                displayUser(users, orders, userCount);
            default:
            {
                printf("Invalid option!\n");
                break;
            }
            }
            break;
        }
        default:
        {
            printf("Invalid option!\n");
            break;
        }
        }
    } while (option != 0);
    free(products);
    free(carts);
    free(orders);
    free(users);
    return 0;
}
