#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

struct product
{
    int id;
    char product_name[30];
    int remain;
    int price;
};

struct cart
{
    int id;
    int product_id;
    char product_name[30];
    int quantity;
    int price;
    int sum;
    int final_sum;
    int user_id;
};

struct user
{
    int id;
    char name[30];
    char address[30];
    int phone_number;
};

struct order
{
    int id;
    char product_name[30];
    int quantity;
    int price;
    int sum;
    char payment[100];
    char status[30];
    int user_id;
};

void MainMenu()
{
    printf("|=============ONLINE SALES SYSTEM==============|\n");
    printf("|==  0.Exit.                                 ==|\n");
    printf("|==  1.Check goods.                          ==|\n");
    printf("|==  2.Cart: check your cart.                ==|\n");
    printf("|==  3.Check purchased orders.               ==|\n");
    printf("|==============================================|\n");
}

void MenuSales()
{
    printf("****************SALES PAGE******************\n");
    printf("0.Exit.\n");
    printf("1.Select goods.\n");
    printf("********************************************\n");
}

void CheckCart()
{
    printf("*****************CART*****************\n");
    printf("0.Move to menu.\n");
    printf("1.Continute Select New Product.\n");
    printf("2.Edit your cart.\n");
    printf("**************************************\n");
}

void MenuOrder()
{
    printf("****************ORDER PAGE******************\n");
    printf("0.Exit.\n");
    printf("1.Check order.\n");
    printf("2.Confirm order.\n");
    printf("3.Check your order.\n");
    printf("********************************************\n");
}

// import data from product file
void readProduct(struct product **products, int *productCount)
{
    char line[1000];
    char *data;
    FILE *productData = fopen("E:/Project C/Data/product.csv", "r");
    if (productData == NULL)
    {
        printf("Error opening file\n");
        return;
    }
    else
    {
        while (fgets(line, 100, productData) != NULL)
        {
            (*productCount)++;
            *products = (struct product *)realloc(*products, *productCount * sizeof(struct product));

            data = strtok(line, ",");
            (*products)[*productCount - 1].id = atoi(data);

            data = strtok(NULL, ",");
            strcpy((*products)[*productCount - 1].product_name, data);

            data = strtok(NULL, ",");
            (*products)[*productCount - 1].remain = atoi(data);

            data = strtok(NULL, ",");
            (*products)[*productCount - 1].price = atoi(data);
        }
        fclose(productData);
    }
}

// Display product
void displayProduct(struct product *products, int productCount)
{
    printf("List of product \n");
    for (int i = 1; i < productCount; i++)
    {
        printf("ID: %d\n", products[i].id);
        printf("%s\n", products[i].product_name);
        printf("Remain %d\n", products[i].remain);
        printf("Price %d\n", products[i].price);
        printf("--------------------------------------\n");
    }
}

//read user from file
void readUser(struct user **users, int *userCount)
{
    char line[100];
    char *data;
    FILE *userData = fopen("E:/Project C/Data/user.csv", "r");
    if (userData == NULL)
    {
        printf("Error opening file\n");
        return;
    }
    else
    {
        while (fgets(line, 100, userData) != NULL)
        {
            (*userCount)++;
            *users = (struct user *)realloc(*users, *userCount * sizeof(struct user));

            data = strtok(line, ",");
            (*users)[*userCount - 1].id = atoi(data);

            data = strtok(NULL, ",");
            strcpy((*users)[*userCount - 1].name, data);

            data = strtok(NULL, ",");
            strcpy((*users)[*userCount - 1].address, data);

            data = strtok(NULL, ",");
            (*users)[*userCount - 1].phone_number = atoi(data);
        }
        fclose(userData);
    }
}

// enter user information and save it to user file
void enterUserInfo(struct user *users)
{
    printf("Enter your information\n");
    printf("User ID: ");
    scanf("%d", &users->id);
    printf("Name: ");
    scanf("%s", users->name);
    printf("Address: ");
    scanf("%s", users->address);
    printf("Phone number: ");
    scanf("%d", &users->phone_number);
}

//save user to file
void exportUser(struct user *users, int userCount)
{
    FILE *userData = fopen("E:/Project C/Data/user.csv", "a");
    if (userData == NULL)
    {
        printf("Error opening file\n");
        return;
    }
    else
    {
        for (int i = 0; i < userCount; i++)
        {
            fprintf(userData, "\n");
            fprintf(userData, "%d, ", users[i].id);
            fprintf(userData, "%s, ", users[i].name);
            fprintf(userData, "%s, ", users[i].address);
            fprintf(userData, "%d, ", users[i].phone_number);
        }
        fclose(userData);
    }
}
// Display user
void displayUser(struct user *users, struct order *order, int userCount)
{
    for (int i = 1; i < userCount; i++)
    {
        if (users[i - 1].id == order[i - 1].user_id)
        {
            printf("User ID: %d", users[i].id);
            printf("\nName: %s\n", users[i].name);
            printf("Address: %s\n", users[i].address);
            printf("Phone number: %d\n", users[i].phone_number);
            printf("\n");
        }
    }
    printf("--------------------------------------\n");
}

// Function to add new cart
void addCart(struct cart **carts, int *cartCount, struct product *products, int productCount, int user_id)
{
    int id;
    int quantity;
    printf("Enter product ID: ");
    scanf("%d", &id);
    printf("Enter quantity: ");
    scanf("%d", &quantity);
    for (int i = 0; i < productCount; i++)
    {
        if (products[i].id == id)
        {
            if (products[i].remain < quantity)
            {
                printf("Not enough product\n");
                return;
            }
            (*cartCount)++;
            *carts = (struct cart *)realloc(*carts, *cartCount * sizeof(struct cart));
            (*carts)[*cartCount - 1].id = *cartCount;
            (*carts)[*cartCount - 1].product_id = products[i].id;
            strcpy((*carts)[*cartCount - 1].product_name, products[i].product_name);
            (*carts)[*cartCount - 1].quantity = quantity;
            (*carts)[*cartCount - 1].price = products[i].price;
            (*carts)[*cartCount - 1].sum = products[i].price * quantity;
            products[i].remain -= quantity;
            break;
        }
    }
}

// Function to check cart
void checkCart(struct cart *carts, int cartCount)
{
    int final_sum = 0;
    printf("\n====== CART ======\n");
    for (int i = 0; i < cartCount; i++)
    {
        if (carts[i].user_id != carts[i - 1].user_id)
        {
            if (final_sum != 0){
                printf("\t\t\t\tFinal sum: %d\n\n", final_sum);
                }
            printf("Cart ID: %d\n", carts[i].id);
            printf("User ID: %d\n", carts[i].user_id);
            printf("Product \t Quantity\tPrice\tSum\n");
        }
        printf("%d \t\t\t", carts[i].product_id);
        printf("%s \t", carts[i].product_name);
        printf("%d \t", carts[i].quantity);
        printf("%d \t", carts[i].price);
        printf("%d \t", carts[i].sum);
        printf("\n");
        final_sum += carts[i].sum;
    }
    printf("====== END CART ======\n");
}

// Function to display cart
void DisplayCart(struct cart *carts, int cartCount)
{
    printf("=======Cart=======\n");
    int final_sum = 0;
    for (int i = 0; i < cartCount; i++)
    {
        printf("Product ID\t Product Name\t Quantity\tPrice\t Sum\n");
        printf("%d \t\t", carts[i].product_id);
        printf("%s \t\t", carts[i].product_name);
        printf("%d \t", carts[i].quantity);
        printf("%d \t ", carts[i].price);
        printf("%d", carts[i].sum);
        printf("\n");
        final_sum += carts[i].sum;
    }
    printf("\t\t\t\tFinal sum: %d\n", final_sum);
}

void changeQuantity(struct cart **carts, int *cartCount, int product_id, int new_quantity)
{
    printf("Enter product ID: ");
    scanf("%d", &product_id);
    printf("Enter new quantity: ");
    scanf("%d", &new_quantity);
    if (new_quantity <= 0) {
        printf("Are you want to remove this product ? (Yes/No): ");
        char answer[10];
        scanf("%s", answer);
        if (strcmp(answer, "Yes") == 0){
            for (int i = 0; i < *cartCount; i++){
                if ((*carts)[i].product_id == product_id){
                    for (int j = i; j < *cartCount - 1; j++){
                        (*carts)[j] = (*carts)[j + 1];
                    }
                    (*cartCount)--;
                    break;
                }
            }
        }
        else{
            for (int i = 0; i < *cartCount; i++){
                if ((*carts)[i].product_id == product_id){
                    (*carts)[i].quantity = new_quantity;
                    (*carts)[i].sum = (*carts)[i].price * new_quantity;
                    break;
                }
            }
        }
    }
}

// Function to check order
void checkOrder(struct order *orders, int orderCount, int user_id)
{
    printf("\n====== ORDERS ======\n");
    int final_sum = 0;
    for (int i = 0; i < orderCount; i++)
    {
        printf("ID Order: %d\n", orders[i].id);
        printf("User ID: %d\n", orders[i].user_id);
        printf("Payment type: %s\n", orders[i].payment);
        printf("Status: %s\n", orders[i].status);
        printf("Product \t Quantity\tPrice\tSum\n");
        
        printf("%s \t\t\t", orders[i].product_name);
        printf("%d \t", orders[i].quantity);
        printf("%d \t", orders[i].price);
        printf("%d \t", orders[i].sum);
        printf("\n");
        final_sum += orders[i].sum;
    }
    printf("\t\t\t\tFinal sum: %d\n", final_sum);
    printf("====== END ORDERS ======\n");
}

// convert cart to order
void CarttoOrder(struct cart *carts, int cartCount, struct order **orders, int *orderCount)
{
    for (int i = 0; i < cartCount; i++)
    {
        (*orderCount)++;
        *orders = (struct order *)realloc(*orders, *orderCount * sizeof(struct order));
        (*orders)[*orderCount - 1].id = *orderCount;
        strcpy((*orders)[*orderCount - 1].product_name, carts[i].product_name);
        (*orders)[*orderCount - 1].quantity = carts[i].quantity;
        (*orders)[*orderCount - 1].price = carts[i].price;
        (*orders)[*orderCount - 1].sum = carts[i].sum;
        strcpy((*orders)[*orderCount - 1].payment, "COD");
        strcpy((*orders)[*orderCount - 1].status, "Pending");
        (*orders)[*orderCount - 1].user_id = carts[i].user_id;
    }
}

void ExportOrder(struct order *orders, int orderCount)
{
    FILE *orderData = fopen("E:/Project C/Data/orders.csv", "a");
    if (orderData == NULL)
    {
        printf("Error opening file\n");
        return;
    }
    else
    {
        for (int i = 0; i < orderCount; i++)
        {
            fprintf(orderData, "%d, ", orders[i].id);
            fprintf(orderData, "%s, ", orders[i].product_name);
            fprintf(orderData, "%d, ", orders[i].quantity);
            fprintf(orderData, "%d, ", orders[i].price);
            fprintf(orderData, "%s, ", orders[i].payment);
            fprintf(orderData, "%s, ", orders[i].status);
            fprintf(orderData, "%d, ", orders[i].user_id);
        }
        fclose(orderData);
    }
}

// Import order from file
void readOrder(struct order **orders, int *orderCount)
{
    char line[100];
    char *data;
    FILE *orderData = fopen("E:/Project C/Data/order.csv", "r");
    if (orderData == NULL)
    {
        printf("Error opening file\n");
        return;
    }
    else
    {
        while (fgets(line, 100, orderData) != NULL)
        {
            (*orderCount)++;
            *orders = (struct order *)realloc(*orders, *orderCount * sizeof(struct order));

            data = strtok(line, ",");
            (*orders)[*orderCount - 1].id = atoi(data);

            data = strtok(NULL, ",");
            strcpy((*orders)[*orderCount - 1].product_name, data);

            data = strtok(NULL, ",");
            (*orders)[*orderCount - 1].quantity = atoi(data);

            data = strtok(NULL, ",");
            (*orders)[*orderCount - 1].price = atoi(data);

            data = strtok(NULL, ",");
            strcpy((*orders)[*orderCount - 1].payment, data);

            data = strtok(NULL, ",");
            strcpy((*orders)[*orderCount - 1].status, data);

            data = strtok(NULL, ",");
            (*orders)[*orderCount - 1].user_id = atoi(data);
        }
        fclose(orderData);
    }
}

void displayOrder(struct order *orders, int orderCount)
{
    int final_sum = 0;
    for (int i = 1; i < orderCount; i++)
    {
        if (orders[i].id != orders[i - 1].id)
        {
            
            if (final_sum != 0){
                printf("\t\t\t\tFinal sum: %d\n", final_sum);
                }
            printf("--------------------------------------\n");
            final_sum = 0;
            printf("ID Order: %d\n", orders[i].id);
            printf("User ID: %d\n", orders[i].user_id);
            printf("Payment type: %s\n", orders[i].payment);
            printf("Status: %s\n", orders[i].status);
            printf("Product \t Quantity\tPrice\tSum\n");
        }
        printf("%s \t\t\t", orders[i].product_name);
        printf("%d \t", orders[i].quantity);
        printf("%d \t", orders[i].price);
        printf("%d \t", orders[i].sum);
        printf("\n");
        final_sum += orders[i].sum;
    }
    printf("\t\t\t\tFinal sum: %d\n", final_sum);
}

int main()
{
    struct product *products = NULL;
    struct order *orders = NULL;
    struct user *users = NULL;
    struct cart *carts = NULL;
    int userCount = 0, orderCount = 0, productCount = 0, cartCount = 0;
    MainMenu();
    int option = 0;
    do{
        readProduct(&products, &productCount);
        printf("Choose your option: ");
        scanf("%d", &option);
        switch (option){
        case 0:{
            printf("You have exited the application!\n");
            break;
        }
        case 1:{
            // func: in san pham
            displayProduct(products, productCount);
            MenuSales();
            // lua chon mat hang mong muon
            int n;
            printf("Choose your option: ");
            scanf("%d", &n);
            switch (n){
                case 0:{
                // chuyen ve giao dien chinh
                printf("Move to Menu\n");
                MenuSales();
                break;
                }
                case 1:{
                    // func: lua chon mat hang
                    addCart(&carts, &cartCount, products, productCount, 1);
                    MainMenu();
                    break;
                }
                default:{
                    printf("Invalid option!\n");
                    break;
                }
            }
            break;
        }

        case 2: // Gio hang
        {
            int opt;
            CheckCart();
            printf("Choose your option: ");
            scanf("%d", &opt);
            switch (opt)
            {
                case 0:{ // thoat ve menu
                    printf("Move to Menu\n");
                    MainMenu();
                    break;
                }
                case 1:{ // Lua chon san pham
                    addCart(&carts, &cartCount, products, productCount, 1);
                    MainMenu();
                    break;
                }
                case 2:{ // Sua gio hang
                    DisplayCart(carts, cartCount);
                    changeQuantity(&carts, &cartCount, 1, 1);
                    MainMenu();
                    break;
                }
                default:{
                    printf("Invalid option!\n");
                    break;
                }
            }
            break;
        }

        case 3:{
            int cdm;
            order:
            MenuOrder();
            printf("Choose your option: ");
            scanf("%d", &cdm);
            switch (cdm){
                case 0:
                    printf("Move to Menu\n");
                    MainMenu();
                    break;
                case 1:
                    CarttoOrder(carts, cartCount, &orders, &orderCount);
                    checkOrder(orders, orderCount, 1);
                    goto order;
                case 2:
                    printf("Confirm order\n");
                    enterUserInfo(users);
                    exportUser(users, userCount);
                    ExportOrder(orders, orderCount);
                    break;
                case 3:
                    printf("Your Order :");
                    readOrder(&orders, &orderCount);
                    readUser(&users, &userCount);
                    displayOrder(orders, orderCount);
                    displayUser(users, orders, userCount);
                default:
                printf("Invalid option!\n");
                break;
            }
            break;
        }
        default:{
            printf("Invalid option!\n");
            break;
        }
        {
            printf("Invalid option!\n");
            break;
        }
        }
    } while (option != 0);

    free(products);
    free(orders);
    free(users);
    free(carts);

    return 0;
}